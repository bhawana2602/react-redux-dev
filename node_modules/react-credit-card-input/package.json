{
  "_from": "react-credit-card-input",
  "_id": "react-credit-card-input@1.1.1",
  "_inBundle": false,
  "_integrity": "sha512-tNwxbW0pztiOLMJUOo/bE8IUyA3jZ9qs7t2JhSqgcAmchNxM50m3jpkcQT+psj5QH5g/sNBx/4nhWY0qpK1ZgQ==",
  "_location": "/react-credit-card-input",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-credit-card-input",
    "fetchSpec": "latest",
    "name": "react-credit-card-input",
    "raw": "react-credit-card-input",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-credit-card-input/-/react-credit-card-input-1.1.1.tgz",
  "_shasum": "009c664d242e3b8cee7e44776648d10f4e741224",
  "_spec": "react-credit-card-input",
  "_where": "/home/abhi/Desktop/my-app",
  "author": {
    "email": "jake@medipass.io",
    "name": "jxom",
    "url": "https://medipass.com.au"
  },
  "bugs": {
    "url": "https://github.com/medipass/react-credit-card-input/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "credit-card-type": "6.3.0",
    "payment": "2.3.0"
  },
  "deprecated": false,
  "description": "A credit/debit card input field for React",
  "devDependencies": {
    "@storybook/react": "^3.2.15",
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.2",
    "babel-loader": "^7.1.2",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-object-rest-spread": "6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-flow": "^6.23.0",
    "babel-preset-react": "^6.24.1",
    "eslint": "^4.11.0",
    "eslint-config-react-app": "^2.0.1",
    "eslint-plugin-flowtype": "^2.39.1",
    "eslint-plugin-import": "^2.9.0",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-prettier": "^2.3.1",
    "eslint-plugin-react": "^7.4.0",
    "flow-bin": "^0.64.0",
    "prettier": "^1.8.2",
    "react": "^16.1.1",
    "react-dom": "^16.1.1",
    "rimraf": "^2.6.2",
    "rollup": "^0.54.1",
    "rollup-plugin-babel": "^3.0.3"
  },
  "eslintConfig": {
    "extends": [
      "react-app"
    ],
    "parser": "babel-eslint",
    "plugins": [
      "prettier",
      "react"
    ],
    "rules": {
      "jsx-a11y/href-no-hash": 0,
      "prettier/prettier": "error"
    }
  },
  "homepage": "https://github.com/medipass/react-credit-card-input#readme",
  "keywords": [
    "card",
    "credit",
    "cvc",
    "debit",
    "input"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-credit-card-input",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.9 || ^15.3.0 || ^16.0.0-rc || ^16.0",
    "react-dom": "^0.14.9 || ^15.3.0 || ^16.0.0-rc || ^16.0",
    "styled-components": ">=3.0.0"
  },
  "readme": "# React Credit Card Input\n\n> A credit/debit card input field for React\n\n## Example\n\n[Click here for an interactive demo](https://medipass.github.io/react-credit-card-input)\n\n![](./example.gif)\n\n\n## Install\n\n```\n$ npm install --save react-credit-card-input styled-components\n```\n\n\n## Usage\n\n```js\nimport CreditCardInput from 'react-credit-card-input';\n\n<CreditCardInput\n  cardNumberInputProps={{ value: cardNumber, onChange: this.handleCardNumberChange }}\n  cardExpiryInputProps={{ value: expiry, onChange: this.handleCardExpiryChange }}\n  cardCVCInputProps={{ value: cvc, onChange: this.handleCardCVCChange }}\n  fieldClassName=\"input\"\n/>\n```\n\n## Available props\n\n<table>\n<thead><tr><th>Prop</th><th>Type</th><th>Default value</th><th>Description</th></tr></thead>\n<tbody>\n  <tr><td>  cardNumberInputProps </td><td>object (optional)</td><td>{}</td> <td>Card number input element props<br/>(e.g. { value: cardNumber, onChange: this.handleCardNumberChange, onBlur: this.handleCardNumberBlur, onError: this.handleCardNumberError })</td></tr>\n  <tr><td>  cardExpiryInputProps </td><td>object (optional)</td><td>{}</td> <td>Card expiry date input element props<br/>(e.g. { value: expiry, onChange: this.handleCardExpiryChange, onBlur: this.handleCardExpiryBlur, onError: this.handleCardExpiryError })</td></tr>\n  <tr><td>  cardCVCInputProps </td><td>object (optional)</td><td>{}</td> <td>Card CVC input element props<br/>(e.g. { value: cvc, onChange: this.handleCardCVCChange, onBlur: this.handleCardCVCBlur, onError: this.handleCardCVCError })</td></tr>\n  <tr><td>  cardNumberInputRenderer </td><td>Function (view input renderer props below)</td><td></td> <td>Card number input renderer</td></tr>\n  <tr><td>  cardExpiryInputRenderer </td><td>Function (view input renderer props below)</td><td></td> <td>Card expiry date input renderer</td></tr>\n  <tr><td>  cardCVCInputRenderer </td><td>Function (view input renderer props below)</td><td></td> <td>Card CVC input renderer</tr>\n  <tr><td>  onError </td><td>Function (optional)</td><td></td> <td>Invokes on field errors. Recieves errorMessage argument.</tr>\n  <tr><td colspan=\"4\"></tr>\n  <tr><td>  cardImageClassName </td><td>string (optional)</td><td>''</td> <td>Class name for the card type image</td></tr>\n  <tr><td>  cardImageStyle </td><td>object (optional)</td><td>{}</td> <td>Style for the card type image</td></tr>\n  <tr><td>  containerClassName </td><td>string (optional)</td><td>''</td> <td>Class name for the field container</td></tr>\n  <tr><td>  containerStyle </td><td>object (optional)</td><td>{}</td> <td>Style for the field container</td></tr>\n  <tr><td>  dangerTextClassName </td><td>string (optional)</td><td>''</td> <td>Class name for the danger text</td></tr>\n  <tr><td>  dangerTextStyle </td><td>object (optional)</td><td>{}</td> <td>Style for the danger text container</td></tr>\n  <tr><td>  fieldClassName </td><td>string (optional)</td><td>''</td> <td>Class name for the field</td></tr>\n  <tr><td>  fieldStyle </td><td>object (optional)</td><td>{}</td> <td>Style for the field</td></tr>\n  <tr><td>  inputClassName </td><td>string (optional)</td><td>''</td> <td>Class name for the inputs</td></tr>\n  <tr><td>  inputStyle </td><td>object (optional)</td><td>{}</td> <td>Style for the inputs</td></tr>\n  <tr><td>  invalidClassName </td><td>string (optional)</td><td>'is-invalid'</td> <td>Class name for the invalid field</td></tr>\n  <tr><td>  invalidStyle </td><td>object (optional)</td><td>{}</td> <td>Style for the invalid field</td></tr>\n  <tr><td colspan=\"4\"></tr>\n  <tr><td>  inputComponent </td><td>string, function, class (optional)</td><td>'input'</td> <td>Input component for the card number, expiry and CVC input</td></tr>\n  <tr><td colspan=\"4\"></tr>\n  <tr><td>  customTextLabels </td><td>object (optional)</td><td>{}</td> <td>Object that defines custom label values.</td></tr>\n</tbody>\n</table>\n\n### Input renderer props\n\n<table>\n<thead><tr><th>Prop</th><th>Type</th><th>Description</th></tr></thead>\n<tbody>\n  <tr><td>  handleCardNumberChange </td><td>Function</td> <td>Handle card number change.</td></tr>\n  <tr><td>  handleCardNumberBlur </td><td>Function</td> <td>Handle card number blur.</td></tr>\n  <tr><td>  handleCardExpiryChange </td><td>Function</td> <td>Handle card expiry change.</td></tr>\n  <tr><td>  handleCardExpiryBlur </td><td>Function</td> <td>Handle card expiry blur.</td></tr>\n  <tr><td>  handleCardCVCChange </td><td>Function</td> <td>Handle card CVC change.</td></tr>\n  <tr><td>  handleCardCVCBlur </td><td>Function</td> <td>Handle card CVC blur.</td></tr>\n  <tr><td>  props </td><td>Object</td> <td>Input component props</td></tr>\n</tbody>\n</table>\n\n#### Error handling\n\n```jsx\n<CreditCardInput\n  onError={({ inputName, err }) => console.log(`credit card input error: ${err}`)}\n  cardCVCInputProps={{\n    onBlur: e => console.log('cvc blur', e),\n    onChange: e => console.log('cvc change', e),\n    onError: err => console.log(`cvc error: ${err}`)\n  }}\n  cardExpiryInputProps={{\n    onBlur: e => console.log('expiry blur', e),\n    onChange: e => console.log('expiry change', e),\n    onError: err => console.log(`expiry error: ${err}`)\n  }}\n  cardNumberInputProps={{\n    onBlur: e => console.log('number blur', e),\n    onChange: e => console.log('number change', e),\n    onError: err => console.log(`number error: ${err}`)\n  }}\n/>\n/>\n```\n\n#### Custom input renderer usage\n\n```jsx\n<CreditCardInput\n  cardCVCInputRenderer={({ handleCardCVCChange, props }) => (\n    <input\n      {...props}\n      onChange={handleCardCVCChange(e => console.log('cvc change', e))}\n    />\n  )}\n  cardExpiryInputRenderer={({ handleCardExpiryChange, props }) => (\n    <input\n      {...props}\n      onChange={handleCardExpiryChange(e =>\n        console.log('expiry change', e)\n      )}\n    />\n  )}\n  cardNumberInputRenderer={({ handleCardNumberChange, props }) => (\n    <input\n      {...props}\n      onChange={handleCardNumberChange(e =>\n        console.log('number change', e)\n      )}\n    />\n  )}\n/>\n```\n\n#### Custom text labels usage\n\n```jsx\n<CreditCardInput\n  customTextLabels={{\n    invalidCardNumber: 'El número de la tarjeta es inválido',\n    expiryError: {\n      invalidExpiryDate: 'La fecha de expiración es inválida',\n      monthOutOfRange: 'El mes de expiración debe estar entre 01 y 12',\n      yearOutOfRange: 'El año de expiración no puede estar en el pasado',\n      dateOutOfRange: 'La fecha de expiración no puede estar en el pasado'\n    },\n    invalidCvc: 'El código de seguridad es inválido',\n    invalidZipCode: 'El código postal es inválido',\n    cardNumberPlaceholder: 'Número de tarjeta',\n    expiryPlaceholder: 'MM/AA',\n    cvcPlaceholder: 'COD',\n    zipPlaceholder: 'C.P.'\n  }}\n/>\n```\n\n## Contributing\n\nContributing to `react-credit-card-input` is easy! With four simple steps:\n\n### Create a branch\n\n1. Fork the repository\n1. `git clone <your-repo-url>` to clone your GitHub repo to your local one\n1. `git pull origin master` to pull the latest code\n1. `npm install` to install the project's dependencies\n1. `git checkout -b the-name-of-my-branch` to create a branch (use something short and comprehensible, such as: `fix-card-number-issue`).\n1. `git remote add upstream https://github.com/medipass/react-credit-card-input.git` and `git pull upstream master` to update your fork from this source.\n\n### Make the change\n\nNote: You can run `npm run storybook`, and then navigate to http://localhost:9001/ to interactively develop your changes. If you are developing a new feature, make sure to add a story for it!\n\n### Test the change\n1. Run `npm run fix` from the project root (This will run Prettier and ESLint and automatically fix any issues).\n\n### Push the change!\n1. `git add -A && git commit -m \"My message (#issue-number/pr-number)\"` (replacing `My message (#issue-number/pr-number)` with a commit message, such as `Fixed card number issue (#43)`) to stage and commit your changes\n1. `git push my-fork-name the-name-of-my-branch`\n\n## License\n\nMIT © [Medipass Solutions](https://medipass.com.au)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/medipass/react-credit-card-input.git"
  },
  "scripts": {
    "build": "rimraf lib && rollup -c rollup.config.js",
    "fix": "npm run lint -- --fix && npm run prettier",
    "flow": "flow",
    "lint": "eslint src/",
    "prepublish": "npm run build",
    "prettier": "prettier --config .prettierrc --write \"src/**/*.js\"",
    "prettier:list-diff": "prettier --config .prettierrc --list-different 'src/**/*.js'",
    "storybook": "start-storybook -p 9001 -c .storybook",
    "storybook:build": "build-storybook -c .storybook -o docs/",
    "test": "npm run lint && npm run flow && npm run prettier:list-diff"
  },
  "version": "1.1.1"
}
